# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/occ/gpe/apss_init.pS $
#
# OpenPOWER OnChipController Project
#
# Contributors Listed Below - COPYRIGHT 2011,2014
# [+] Google Inc.
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

//////////////////////////////////////////////////////////////////////
// Includes
//////////////////////////////////////////////////////////////////////
.nolist
#include "pgp.h"
#include "pgas.h"
.list

//////////////////////////////////////////////////////////////////////
// Define Address Space
//////////////////////////////////////////////////////////////////////
.oci

//////////////////////////////////////////////////////////////////////
// Define Symbols
//////////////////////////////////////////////////////////////////////

#include <pss_constants.h>

#define GPE_PROG_ID 0x0001

//////////////////////////////////////////////////////////////////////
// Define Structures
//////////////////////////////////////////////////////////////////////

// Declare the offsets of the struct that will be passed to the
// GPE program via the ETR register
//
// struct G_gpe_apss_initialize_gpio_args =
// {
.struct     0
ERROR_RC:
    .struct ERROR_RC + 8
ERROR_FFDC:
    .struct ERROR_FFDC + 8
CONFIG:
// };

//////////////////////////////////////////////////////////////////////
// Begin Program
//////////////////////////////////////////////////////////////////////

.text

#include <gpe_macros.h>
#include <pss_macros.h>

//--------------------------------------------------------------------
// Name: _perform_spi_transaction (MACRO)
//
// Description:  Start SPI transaction, wait for 5usec, and then
//               wait for operation to complete.
//
// Inputs:       None
//
// Outputs:      None (on error, D0 will contain status register)
//
// Modifies:     CTR, D0, D1
//--------------------------------------------------------------------
.macro _perform_spi_transaction

// Start SPI transaction
_putscom SPIPSS_P2S_COMMAND_REG, 0x8000000000000000

// wait 5usec
waits (5 * MICROSECONDS)

_wait_for_spi_ops_complete 10, error_timeout

.endm


//--------------------------------------------------------------------
// PORE-GPE Routine Specification:
//
// Name: GPE_apss_initialize_gpio
//
// Description:  Initialize APSS GPIO pins for Input/Output, Interrupt
//               Drive H/L
//
// Inputs:       G_gpe_apss_initialize_gpio_args - Error and G_gpio_config
//     struct {
//         PoreGpeErrorStruct error;
//         apssGpioConfigStruct gpio_config0 // G_gpio_config[0] (input to APSS)
//         apssGpioConfigStruct gpio_config1 // G_gpio_config[1] (input to APSS)
//     } G_gpe_apss_initialize_gpio_args
//     struct {
//         uint64_t rc;          // This should be read as 63:32=addr, 31:0=rc
//         uint64_t ffdc;        // Whatever GPE program puts in for FFDC data
//     } PoreGpeErrorStruct;
//     struct apssGpioConfigStruct
//     {
//        uint8_t direction;
//        uint8_t drive;
//        uint8_t interrupt;
//     }
//
// Outputs:      None (except FFDC on failure)
//
// End PORE-GPE Routine Specification
//--------------------------------------------------------------------
.global GPE_apss_initialize_gpio
GPE_apss_initialize_gpio:

    // Copy passed Structure Pointer into A1
    mr      A1, ETR
    halt

    // TODO Clean this up, unreachable code left over below, hook for future
    // function

    // Wait for SPI operations to be complete (up to 10usec timeout)
    _wait_for_spi_ops_complete 10, error_timeout

    // Setup control regs
    // frame_size=16, out_count=16, in_delay1=never, in_count2=16
    _putscom SPIPSS_P2S_CTRL_REG0, 0x410FC00004000000
    // bridge_enable, clock_divider=7, 2 frames
    _putscom SPIPSS_P2S_CTRL_REG1, 0x8090400000000000
    // inter_frame_delay=50 (5usec)
    _putscom SPIPSS_P2S_CTRL_REG2, 0x0019000000000000

    // Build apss commands based on gpio_config arguments
    // Arguments are each 1 byte long and contain default
    // value to be used to init each item (Direction/Drive/Interrupt)

    //// Port 0

    // Port 0 - Direction (APSS cmd 0x40xx)
    ldandi D0, CONFIG, A1, 0xFF00000000000000
    srdi D0, D0, 8
    ori  D0, D0, 0x4000000000000000
    _putscom_d0 SPIPSS_P2S_WDATA_REG

    _perform_spi_transaction

    // Port 0 - Drive (APSS cmd 0x50xx)
    ldandi D0, CONFIG, A1, 0x00FF000000000000
    ori  D0, D0, 0x5000000000000000
    _putscom_d0 SPIPSS_P2S_WDATA_REG

    _perform_spi_transaction

    // Port 0 - Interrupt (APSS cmd 0x60xx)
    ldandi D0, CONFIG, A1, 0x0000FF0000000000
    ori  D0, D0, 0x0060000000000000
    sldi D0, D0, 8
    _putscom_d0 SPIPSS_P2S_WDATA_REG

    _perform_spi_transaction

    //// Port 1

    // Port 1 - Direction (APSS cmd 0x41xx)
    ldandi D0, CONFIG, A1, 0x000000FF00000000
    ori  D0, D0, 0x0000410000000000
    sldi D0, D0, 16
    _putscom_d0 SPIPSS_P2S_WDATA_REG

    _perform_spi_transaction

    // Port 1 - Drive (APSS cmd 0x51xx)
    ldandi D0, CONFIG, A1, 0x00000000FF000000
    ori  D0, D0, 0x0000005100000000
    sldi D0, D0, 24
    _putscom_d0 SPIPSS_P2S_WDATA_REG

    _perform_spi_transaction

    // Port 1 - Interrups (APSS cmd 0x61xx)
    ldandi D0, CONFIG, A1, 0x0000000000FF0000
    ori  D0, D0, 0x0000000061000000
    sldi D0, D0, 32
    _putscom_d0 SPIPSS_P2S_WDATA_REG

    // Start SPI transaction (dont need to wait for p2s_ongoing bit since last cmd)
    _putscom SPIPSS_P2S_COMMAND_REG, 0x8000000000000000

    // wait 5usec
    waits (5 * MICROSECONDS)

    halt


error_statusreg:
    // An error/reserved bit was set when reading p2s status register...
    // D0: P2S_STATUS_REG
    _saveffdc GPE_PROG_ID, 0x0002
    halt


error_timeout:
    // p2s_ongoing bit was never cleared after several retries...
    // D0: P2S_STATUS_REG
    _saveffdc GPE_PROG_ID, 0x0001
    halt

//////////////////////////////////////////////////////////////////////
// End of Program
//////////////////////////////////////////////////////////////////////
